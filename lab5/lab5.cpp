/**
 * Практическое занятие №5. "Старые" потоковые функции стандартной библиотеки.
 * Указатели на функции. Структуры.
 */

#include <cstdio>
#include <iostream>
#include <cmath>
#include <algorithm>
#include "other.h"
#include "book.h"
#include "matrix.h"

using namespace std;

int main()
{
    /**
     * Задание 1. "Старые" потоковые функции стандартной библиотеки.
     *
     * Эти функции использовались в языке C. Если вы будете писать программы на
     * нем, вам придется использовать их вместо std::cin и std::cout.
     */

    /**
     * Задание 1.1.
     *
     * С помощью функции scanf сформирйуте три коэффициента: A,B,C.
     */

    int A, B, C;
    scanf("%d %d %d", &A, &B, &C);


    /**
     * Задание 1.2.
     *
     * Выведите (красиво!) таблицу значений y=A*x*x + B*x + C при изменении x в
     * диапазоне -2 до +2 с шагом 0.5
     */
    const int NUMBER_OF_POINTS = 9;

    printf("-----------------------\n");
    printf("| x:   | y:           |\n");
    printf("-----------------------\n");

    for (int i = 0; i < NUMBER_OF_POINTS; ++i) {
        double x = -2 + i * .5;
        double y = A*x*x + B*x + C;
        printf("| %4.1lf | %12.6lf |\n", x, y);
    }

    printf("-----------------------\n");

    /**
     * Задание 2. Указатели на функции.
     */

    /**
     * Задание 2.1. Указатель на функцию. "Калькулятор".
     *
     * Напишите функции:
     * 1. add - принимает два значения double и возвращает сумму этих значений;
     * 2. sub- принимает два значения double и возвращает разность этих
     *    значений;
     * 3. mul - аналогично для умножения;
     * 4. div - аналогично для деления;
     * 5. а для возведения в степень можете использовать функцию стандартной
     *    библиотеки - pow(). 
     *
     * Подсказка 1: прототип функции находится в <cmath>.
     * Подсказка 2: стандартная библиотека предоставляет несколько
     * перегруженных вариантов этой функции, а Вам потребуется сформировать
     * указатель на double pow(double, double).
     *
     * Предоставьте пользователю следующую возможность:
     *
     * - пока пользователь хочет пользоваться услугами вашего калькулятора, он
     *   может вводить два значения и знак операции а вы выводите результат. 
     * - результат получаете посредством вызова соответствующей вашей функции
     *   по указателю.
     * - предусмотрите возможность ввода непредусмотренного знака операции.
     */

    {
        double (*operations[5])(double, double) = {add, sub, mul, div, pow};
        char operations_index[5] = {'+', '-', '*', '/', '^'};

        double x, y;
        char operation;
        bool is_enter = true;

        do {
            cout << "Введите выражение: ";
            cin >> x >> operation >> y;

            if (cin.fail()) {
                cout << "Введено некорректное выражение." << endl;
                cin.clear();
                break;
            }

            int i = 0;
            for (; i < 6; i++) {
                if (operations_index[i] == operation) break;
            }

            if (i >= 5) { 
                cout << "Введена некорректная операция." << endl;
                break;
            }

            cout << operations[i](x,y) << endl;
            char line_val;

            cout << "Продолжать ввод [y\\n]? ";
            cin >> line_val;
            if (line_val == 'n' || line_val != 'y' && line_val != 'Y' && line_val != '\n') is_enter = false;
        } while(is_enter);
    }

    /**
     * Задание 2.2. Указатель на функцию в качестве аргумента.
     *
     * Дана заготовка функции сортировки любых объектов - sort.
     *
     * Функция принимает следующие параметры:
     * 1. указатель на первый сортируемый элемент
     * 2. количество сортируемых элементов
     * 3. размер элемента в байтах
     * 4. указатель на функцию перестановки элементов
     * 5. указатель на функцию сравнения элементов
     */

    /**
     * Задание 2.2.1.
     *
     * Напишите функцию перестановки двух целых значений - swap_int, которая
     * принимает два void указателя и меняет значения местами.
     *
     * Напишите функцию сравнения двух целых значений - CmpInt, которая
     * принимает два void указателя и возвращает int результат сравнения:  
     * <0 - первый элемент меньше, чем второй;
     * =0 - равны;
     * >0 - первый элемент больше, чем второй.
     *
     * Используйте эти функции в функции сортировки.
     */
    {
        int nAr[]={7,1,4,8,2};   //массив для сортировки
        int nTotal=5;          //количество элементов в массиве 

        /** Печать исходного массива */
        for (int i = 0; i < nTotal; ++i) {
            cout  << ' ' << nAr[i];
        }
        cout << endl;

        sort(reinterpret_cast<char*>(&nAr[0]), nTotal, sizeof(int), 
             swap_int, cmp_int);

        /** Печать результатов сортировки */

        for (int i = 0; i < nTotal; ++i) cout << ' ' << nAr[i];
        cout << endl;
    }

    /**
     * Задание 2.2.2.
     *
     * По аналогии с заданием 2.2.1 напишите функцию swap_double и cmp_double,
     * и вызовите функцию sort для сортировки вещественных значений.
     */

    {
        double dAr[]={7.2,1.1,4.15,4.17,2.12};   //массив для сортировки
        int nTotal=5;          //количество элементов в массиве 

        /** Печать исходного массива */
        for (int i = 0; i < nTotal; ++i) {
            cout  << ' ' << dAr[i];
        }
        cout << endl;

        sort(reinterpret_cast<char*>(&dAr[0]), nTotal, sizeof(double), 
             swap_double, cmp_double);

        /** Печать результатов сортировки */

        for (int i = 0; i < nTotal; ++i) cout << ' ' << dAr[i];
        cout << endl;
    }

    /**
     * Задание 2.2.3.
     *
     * По аналогии с 2.2.1 создайте вспомогательные функции - swap_str и
     * cmp_str и вызовите функцию sort для сортировки массива указателей на
     * строки.
     */

    {
        const char* arStr[] = {"QQQ", "SDF", "ABC"};
        int strTotal=3;          //количество элементов в массиве 

        /** Печать исходного массива */

        for (int i = 0; i < strTotal; ++i) {
            cout  << ' ' << arStr[i];
        }
        cout << endl;

        sort(reinterpret_cast<char*>(arStr), strTotal, sizeof(const char*), 
             swap_str, cmp_str);

        /** Печать результатов сортировки */

        for (int i = 0; i < strTotal; ++i) cout << ' ' << arStr[i];
        cout << endl;
    }

    /**
     * Задание 2.3. Массивы указателей на функцию.
     *
     * Напишите функции для работы с массивом:
     *
     * 1. print_max - печатает максимальный элемент;
     * 2. print_min - печатает минимальный элемент;
     * 3. sort_asc - сортирует по возрастанию и выводит на печать;
     * 4. sort_desc - сортирует по убыванию и выводит на печать.
     *
     * У всех эти функций должна быть одинаковая сигнатура. Объявите, два
     * массива: массив указателей на функции 1-4 и массив указателей на строки
     * с описанием этих функций.
     *
     * Реализуйте меню для пользователя: выведите нумерованный список имен
     * функций (из второго массива), примите от пользователя номер функции,
     * после чего вызовите функцию для какого-нибудь массива.
     */

    {
        int arr[] = {5, 2, 8, 1, 9, 4};
        int size = sizeof(arr) / sizeof(arr[0]);

        ArrayFunction functions[] = {print_max, print_min, sort_asc, sort_desc};
        const char* function_names[] = {
            "Найти максимум",
            "Найти минимум",
            "Сортировать по возрастанию",
            "Сортировать по убыванию"
        };

        int choice;
        do {
            for (int i = 0; i < 4; ++i) {
                cout << '[' << i + 1 << "] " << function_names[i] << endl;
            }
            cout << "[0] Выход" << endl;

            cin >> choice;

            if (choice >= 1 && choice <= 4) {
                functions[choice - 1](arr, size);
            } else if (cin.fail()) {
                cout << "Требуется ввести число." << endl;
                cin.clear();
            } else if (choice < 0 || choice > 4) {
                cout << "Требуется ввести число от 0 до 4." << endl;
            }

        } while (choice != 0);
    }

    /**
     * Задание 2.4. Метод прямоугольников.
     *
     * Напишите функцию integrate, которая бы принимала:
     * 1. указатель на интегрируемую функцию, которая принимает double и
     *    возвращает double;
     * 2. нижнюю границу интегрирования (вещественное число);
     * 3. верхнюю границу интегрирования (вещественное число);
     * 4. количество отрезков, на которых будет вычисляться функция.
     *
     * Функция должна возвращать численное значение определенного Intа,
     * полученного методом прямоугольников.
     *
     * Проверьте функцию на разных вещественных функциях (линейных, параболах,
     * exp, sin) и сравните полученные результаты с теоретическими.
     */

    {
        double linear_integral = integrate(linear, 0, 5, 1000);
        cout << "Int 2x + 3 от 0 до 5 (численный): " << linear_integral << endl;
        cout << "Int 2x + 3 от 0 до 5 (теоретический): " << 40 << endl; 

        double parabola_integral = integrate(parabola, 0, 5, 1000);
        cout << "Int 2x^2 - 10x + 5 от 0 до 5 (численный): " << parabola_integral << endl;
        cout << "Int 2x^2 - 10x + 5 от 0 до 5 (теоретический): " << "-16.(6)" << endl;

        double exp_integral = integrate(exp, 0, 5, 1000);
        cout << "Int exp(x) от 0 до 5 (численный): " << exp_integral << endl;
        cout << "Int exp(x) от 0 до 5 (теоретический): " << exp(5) - exp(0) << endl;

        double sin_integral = integrate(sin, 0, 5, 1000);
        cout << "Int sin(x) от 0 до 5 (численный): " << sin_integral << endl;
        cout << "Int sin(x) от 0 до 5 (теоретический): " << "0.716..." << endl;
    }


    /**
     * Задание 3. Структуры С.
     */

    /**
     * Задание 3.1. Структура Book.
     */

    /**
     * Задание 3.1.1.
     *
     * Объявите структуру Book, описывающую книгу (автор, заглавие, год
     * издания, цена, категория…).
     *
     * Подумайте: какого типа могут быть поля структуры.
     * Подсказка: объявление структуры рекомендуется выносить в заголовочный
     * файл.
     */

    /**
     * Задание 3.1.2.
     *
     * Создайте разными способами (глобальный, локальный, статический,
     * динамический) экземпляры (объекты) типа Book (без инициализации).
     *
     * Определите - сколько памяти отводит компилятор под каждый такой объект. 
     *
     * Как инициализируются (или не инициализируются) поля структуры?
     *
     * Подумайте: от чего зависит объем выделяемой памяти?
     */

    /**
     * Задание 3.1.3. 
     *
     * Заполните поля созданных объектов.
     *
     * Замечание: если для хранения строки используется массив, необходимо
     * предусмотреть "защиту" от выхода за границы массива.
     */

    /**
     * Задание 3.1.4. 
     *
     * Напишите функцию, выводящую на экран реквизиты книги.
     *
     * Подумайте: как эффективнее передавать экземпляр Book в функцию.
     *
     * Для вывода на консоль используйте функцию стандартной библиотеки printf.
     */

    /**
     * Задание 3.1.5.
     *
     * Напишите функцию для формирования полей структуры. Для ввода используйте
     * функцию стандартной библиотеки scanf.
     *
     * Замечание: неплохо заложить в такую функцию возможность проверки
     * корректности введенного значения, например, год издания не может быть
     * меьше, чем... (год появления письменности), категорию ползователь должен
     * выбирать из существующих, цена не может быть отрицательной...
     *
     * Кроме этого необходимо проверить и ошибки другого рода: программа
     * ожидает число, а пользователь ввел случайно букву.
     */

    {
        Book global_book;
        static Book static_book;

        {
            Book local_book;
            printf("Размер local_book: %zu\n", sizeof(local_book));
        }
        printf("Размер global_book: %zu\n", sizeof(global_book));
        printf("Размер static_book: %zu\n", sizeof(static_book));

        Book* dynamic_book = new Book;
        printf("Размер dynamic_book: %zu\n", sizeof(*dynamic_book));

        if(input_book(dynamic_book)) print_book(dynamic_book);

        delete dynamic_book;
    }

    /**
     * Задание 3.2. Матричные операции.
     */

    /**
     * Задание 3.2.1. 
     *
     * Задайте структуру Matrix, которая будет преставлять вещественную матрицу
     * размера MxN из линейной алгебры.
     *
     * Это определение и связанные с ними функции определите в отдельной паре
     * файлов: matrix.h и matrix.cpp.
     */

    /**
     * Задание 3.2.2.
     *
     * Создайте набор базовых функций для работы с этой структурой:
     *
     * - void m_zero(Matrix *A, int m, int n) - инициализация матрицы размера m
     *   на n нулями;
     * - void m_id(Matrix *A, int n) - инициализация единичной матрицы n на n;
     * - void m_free(Matrix *A) - очистка памяти, используемой для матрицы;
     * - void m_copy(const Matrix *src, Matrix *dst) - копирование данных
     *   матрицы src в матрицу dst.
     * - int m_width(const Matrix *A) - ширина матрицы A;
     * - int m_height(const Matrix *A) - высота матрицы A;
     * - double m_get(const Matrix* A, int i, int j) - получение i,j-того
     *   элемента матрицы;
     * - void m_set(Matrix *A, int i, int j, double value) - установка i,j-того
     *   элемента матрицы.
     */

    /**
     * Задание 3.2.3.
     *
     * Реализуйте набор операций из линейной алгебры:
     *
     * - int m_add(Matrix *A, const Matrix *B) - если A и B одинакового
     *   размера, то прибавляет к A значения B и возвращает 0; иначе возвращает
     *   1.
     * - void m_neg(Matrix *A) - заменяет все элементы матрицы A на
     *   противоположные.
     * - int m_mult(const Matrix *A, const Matrix *B, Matrix *dst) - умножает
     *   матрицу A на матрицу B и сохраняет результат в dst. Если размеры
     *   матрицы не позволяют умножить матрицы, функция возвращает 1, иначе 0.
     */

    /**
     * Задание 3.2.4.
     *
     * С помощью полученного функционала реализуйте матричное вычисление чисел
     * Фибоначчи. Делается это с помощью такой формулы:
     *
     * /  F[n]  \ = / 1  1 \ * / F[n-1] \
     * \ F[n-1] /   \ 1  0 /   \ F[n-2] /
     *
     * Задайте матрицу в центре и матрицу-вектор с двумя первыми числами
     * Фибоначчи: 1 и 0. Выполняйте эту формулу итеративно и выведите первые 40
     * чисел Фибоначчи.
     */

    {
        const int transform_matrix[2][2] = {{1,1},{1,0}};

        Matrix fib_matrix;
        m_zero(&fib_matrix, 2, 2);
        for (int i = 0; i < 2; ++i) {
            for (int j = 0; j < 2; j++) m_set(&fib_matrix, i, j, transform_matrix[i][j]);
        }

        Matrix fib_vector;
        m_zero(&fib_vector, 2, 1);
        m_set(&fib_vector, 0, 0, 1);
        m_set(&fib_vector, 1, 0, 0);

        Matrix fib_result;

        for (int i = 0; i < 40; ++i) {
            cout << m_get(&fib_vector, 1, 0) << " ";
            m_mult(&fib_matrix, &fib_vector, &fib_result);
            m_copy(&fib_result, &fib_vector);
        }
        cout << endl;

        m_free(&fib_matrix);
        m_free(&fib_vector);
        m_free(&fib_result);
    }

    return 0;
}
