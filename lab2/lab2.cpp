/**
 * Практическое занятие №2. Побитовые операторы. Директивы препроцессора.
 * Указатели.
 */

#include <iostream>
#include <cmath>

#include <algorithm> 

#ifdef NDEBUG
    #include "1.h"
#else
    #include "2.h"
#endif


using namespace std; 

#define LENGHT(r) (2 * M_PI * (r))
#define MAX(a, b) ((a) >= (b) ? (a) : (b))
#define EXCHANGE(x, y) {  \
    (x) ^= (y);           \   
    (y) ^= (x);           \
    (x) ^= (y);           \
}

void showBits(short y) {
    short mask = 1;

    int bits[16];

    for (int i = 0; i < 16; i++) {
        bits[i] = (y & (mask << i)) > 0;
    }

    reverse(begin(bits), end(bits));

    for (int i : bits) {
        cout << i << ' ';
    }
    cout << endl;
}

int main()
{
    /**
     * Задание 1. Побитовая арифметика (and, or, xor, not), сдвиги.
     */

    /**
     * Задание 1.1.
     * 
     * Задайте значение переменной `y`, например, с помощью потока ввода.
     *
     * 1. С помощью побитовых операторов и операторов сдвига выведите значение
     *    переменной `y` на консоль в двоичном виде.
     * 2. Сделайте то же, но пропустив незначащие нули.
     *
     * Например, если `y == 9`, то должно получиться
     * 1. `0 0 0 0 ... 0 0 1 0 0 1` (количество двоичных цифр зависит от
     *    платформы).
     * 2. `1 0 0 1`.
     *
     * Что выведет ваша программа, если ввести отрицательное число? Объясните
     * этот результат.
     */

    {
        // short y;
        // cin >> y;

        // short mask = 1;

        // int bits[16];

        // for (int i = 0; i < 16; i++) {
        //     bits[i] = (y & (mask << i)) > 0;
        // }

        // reverse(begin(bits), end(bits));

        // for (int i : bits) {
        //     cout << i << ' ';
        // }
        // cout << endl;
    }

    /**
     * Задание 1.2.
     *
     * Дана целая переменная `y`, задайте ее значение, например, с помощью
     * потока ввода.
     *
     * В рамках одного цикла "сдвиньте" все единицы в переменной `y` вправо,
     * обновив тем самым значение этой переменной.
     *
     * Например:
     * было:  0100 1111 0000 0000 0110 1111 0000 0010
     * стало: 0000 0000 0000 0000 0000 1111 1111 1111
     *
     * Выведите переменную на экран в двоичном виде до преобразования и после,
     * используя код из задания 1.1.
     */

    {
        // int y;
        // cin >> y;

        // int mask = 1;

        // int bits[32];

        // for (int i = 0; i < 32; i++) {
        //     bits[i] = (y & (mask << i)) > 0;
        // }

        // reverse(begin(bits), end(bits));

        // int sum = 0;

        // for (int i = 0; i < 32; i++) {
        //     sum += bits[i];
        // }

        // for (int i : bits) {
        //     cout << i << ' ';
        // }
        // cout << endl;

        // for (int i = 0; i < 32; i++) {
        //     cout << (32 - i <= sum) << ' ';
        // }
        // cout << endl;
    }

    /**
     * Задание 1.3.
     *
     * Дана целая переменная `y`, задайте ее значение.
     *
     * Напишите код, который с помощью побитовых операций:
     *
     * 1. вычислит `y * 2^n`, где целое `n` (0 <= n < 16) задается отдельно;
     * 2. проверит, делится ли `y` на 2, проверит, делится ли `y` на 4;
     * 3. вычислит целую часть логорифма `y` по основанию 2.
     */

    {
        // int y, n;
        // cin >> y >> n;

        // int mask = 1;

        // cout << (y << n) << endl;
        // cout << ((y & mask) == 0) << ((y & mask) == 0 && (y & (mask << 1)) == 0) << endl;

        // int index = 0;

        // for (int i = 0; i < 32; i++) {
        //     if ((y & (mask << i)) > 0) index = i;
        // }

        // cout << index << endl;
    }

    /**
     * Задание 1.4.
     *
     * Какие операции следует применить к заданному ниже операнду sNum для
     * того, чтобы переменная sRes приняла требуемое значение? Каждую побитовую
     * операцию можно использовать только 1 раз.
     *
     * Замечание: значения подобраны таким образом, что в каждом случае
     * достаточно использовать один оператор (и при необходимости маску). 
     */

    {
        short sNum = 0x8008;
        short sRes;

        /** sRes == 0x7ff7 */
        sRes = -sNum - 1;
    
        /** sRes == 0x8ff8 */
        sRes = sNum | 0x0ff0;

        /** sRes == 0x0008 */
        sRes = sNum & 0x000f;

        /** sRes == 0x7f08 */
        sRes = (0xff00 & (-sNum - 1)) | (0x00ff & sNum);

        /** sRes == 0xf001 */
        sRes = sNum >> 3;

        /** sRes == 0x0010 */
        sRes = sNum << 1;
    }

    
    /**
     * Задание 2. Директивы препроцессора.
     */

    /**
     * Задание 2.1. Использование "математических" макросов стандартной
     * библиотеки.
     *
     * В заголовочном файле <cmath> (который в свою очередь включает старый
     * файл math.h) определены часто используемые математические константы,
     * например M_PI. Воспользуйтесь этой константой для вычисления длины
     * окружности.
     */

    {
        float radius = 5;
        float circumference = M_PI * 2 * radius;
        //cout << circumference << endl;
    }
    
    /**
     * Задание 2.2. Макросы с параметрами.
     */

    /**
     * Задание 2.2.1.
     *
     * Напишите свою макроподстановку LENGHT которая вычисляет длину
     * окружности. 
     */

    {
        /** Протестируйте написанный макрос для следующих ситуаций */

        float l1 = LENGHT(1 + 2); // должно быть 18.8495...
        float l2 = 1 / LENGHT(2); // должно быть 0.07957...
    }

    /**
     * Задание 2.2.2.
     * 
     * Определите макрос MAX(A, B) для вычисления б'ольшего значения из двух.
     */

    {
        /**
         * Используйте макрос следующим образом. Следите за изменением значений
         * переменных k, i, j. Объясните результат.
         *
         * Постарайтесь убрать побочные эффекты.
         *
         * Отметьте случаи, когда избежать побочных эффектов невозможно.
         */

        int i = 10, j = 12, k;
                             // i: j: k:
        k = MAX(i, j);       // 10 12 12
        k = MAX(j, i) * 2;   // 10 12 24
        k = MAX(j, i+3);     // 10 12 13
        k = MAX(i--, j++);   // 9  14 13 <-- побочного эффекта не избежать (j++ исполняется 2 раза)
    }

    /**
     * Задание 2.2.3. 
     *
     * Определите макрос EXCHANGE(X, Y)  для перестановки двух объектов типа
     * int в памяти местами. 
     *
     * Проверьте для приведенного фрагмента. 
     *
     * Подумайте, что будет делать макроподстановка, если переставляемые
     * значения разного типа???
     */

    {
        int x1=1, y1=-1;
        EXCHANGE(x1,y1);

        int x2=100, y2=-100;
        EXCHANGE(x2,y2);
    }

    /**
     * Задание 2.3. Директивы условной трансляции.
     *
     * Выполняя следующий фрагмент, посмотрите, какое значение принимает
     * переменная iNN. 
     *
     * Что нужно сделать для того, чтобы результат был равен 0? 1? 2?
     */

    {
        int iNN;
        #if defined NNN && defined MMM
            iNN = 0;
        #elif defined MMM
            iNN = 1;
        #elif defined NNN 
            iNN = 2;

        #else
            iNN = -1;
        #endif

        // cout << iNN << endl;

        // 0? -- определить макросы NNN и MMM
        // 1? -- определить макрос MMM
        // 2? -- определить макрос NNN
    }

    /**
     * Задание 2.4. Задание директив при сборке.
     *
     * При сборке программы компилятором можно установить необходимые
     * макроподстановки с помощью ключа `-D`. Например, чтобы при сборке 
     * была определена директива `A` без значения и директива `B` со значением
     * `1`, надо добавить следующие ключи к команде сборки: `-D A -D B=1`.
     * Таким образом команда сборки будет выглядеть примерно так:
     *
     * `gcc -g -D A -D B=1 lab2.cpp`
     *
     * Уберите из кода определения макросов NNN и MMM из прошлого задания и
     * приведите команды компиляции, которые заставят переменную iNN принять
     * нужное значение. 
     *
     * Проверьте их работоспособность.
     */

    // 0? -- gcc -g -DNNN=1 -DMMM=2 lab2.cpp
    // 1? -- gcc -g -DMMM=2 lab2.cpp
    // 2? -- gcc -g -DNNN=1 lab2.cpp

    /**
     * Задание 2.5. Сборки "DEBUG" и "RELEASE". Предопределенные макросы
     * компилятора.
     *
     * При отладке удобно выводить дополнительную информацию, которая может
     * мешать в итоговой (релизной) версии программы.
     *
     * Существует стандартный макрос, который принято устанавливать при
     * релизной сборке - `NDEBUG`.
     *
     * С помощью макроса NDEBUG и предопределенных макросов выведите на консоль
     * для отладочной версии информацию о том, что это отладочная сборка, о
     * дате сборки, о имени файла, имени функции и строки. Для релизной сборки
     * такая информация не должна выводиться.
     *
     * Для защиты работы соберите две версии программы: отладочную и итоговую.
     * Чтобы собрать итоговую версию в другом исполняемом файле, используйте 
     * ключ компилятора `-o`, примерно так: 
     *
     * `gcc <ваши опции> -o release.out lab2.cpp`
     */

    #ifndef NDEBUG
        cout << "!DEBUG" << ' ' << __DATE__ << ' ' <<  __FILE__ << ' ' << __func__ << ' ' << __LINE__ << endl;
    #endif

    /**
     * Задание 3.Заголовочные файлы. Директива #include.
     */

    /**
     * Задания 3.1. 
     *
     * Создайте и подключите к проекту два заголовочных файла 1.h и 2.h.
     * 
     * В каждом заголовочном файле объявите перечисление с одинаковыми именами
     * констант, но сопоставьте именованным константам разные значения,
     * например:
     *
     * - 1.h - enum MyEnum{My1, My2, My3};  
     * - 2.h - enum MyEnum{My1=5, My2, My3};
     *
     * С помощью директив условной трансляции в DEBUG-версии пользуйтесь
     * значениями констант из 1.h, а в RELEASE-версии значениями констант из
     * 2.h.
     *
     * Замечание: заголовочные файлы принято подключать в верхней части файла,
     * до любых функций (хотя правила компиляции не запрещают подключить их
     * тут).
     */

    /**
     * Задание 4. Указатели. 
     */

    /**
     * Задание 4.1. 
     * 
     * Объявите объекты разных типов и проинициализируйте их.
     *
     * Объявите указатели соответствующих типов и проинициализируйте их
     * адресами заданных объектов. 
     *
     * Выполняя задание, с помощью отладчика посмотрите, какие значения будут
     * присвоены переменным-указателям и на что эти указатели "указывают".
     */

    {
        double a = 2.71;
        int b = 2;

        double* ap = &a; //(ap = 0x7fffffffd7f0 *ap = 2.71)
        int* bp = &b; //(ap = 0x7fffffffd7ec *ap = 2)
    }

    /**
     * Задание 4.2.
     *
     * Объявите указатель на тип char и проинициализируйте его адресом
     * строкового литерала. Присвойте переменной типа char значение любого
     * элемента строки.
     *
     * Проверьте - возможно ли присвоить какое-либо значение по адресу,
     * задаваемому указателем?
     */

    {
        char s = 'A';
        char* c = &s; //(*c) = 'A'
        s = 'B'; //(*c) = 'B'
        (*c) = 'D';
        //cout << s << endl; //Значание переменной s изменилось на 'D' --> возможно
    }

    /**
     * Задание 5. Арифметика указателей. Операция разыменования указателя.
     *
     * Выполните следующий код по строчкам в отладчике, проследите за
     * изменением значений указателей и значений объектов, на которые они
     * указывают. 
     *
     * Интерпретируте наблюдаемые результаты.
     */
    {
        int nAr[3] = {1,3};
        int* pn = &nAr[0]; // pn = 0x7fffffffd7d4; *pn = 1
        (*pn)++; // *pn = 2; nAr[0] = 2
        pn++; // pn = 0x7fffffffd7d8; *pn = 3; nAr[0] = 2 

        char cAr[] = {'A', 'B', 'C', 'D'};
        char *pc = &cAr[0]; // pc = 0x7fffffffd7d0; *pc = 65 'A'
        (*pc) = (*pc) + 5;  // pc = 0x7fffffffd7d0; *pc = 70 'F'; cAr[0] = 70 'F'
        pc = pc + 3; // 0x7fffffffd7d3; *pc = 68 'D'
    
        double dAr[3]={1.0,2.0};
        double *pd1 = &dAr[0]; // pd1 = 0x7fffffffd7b0; *pd1 = 1
        double *pd2 = pd1; //pd2 = 0x7fffffffd7b0; *pd2 = 1 
        (*pd2) += 2; // *pd2 = 3; *pd1 = 3; dAr[0] = 3
        pd2 += 2; // pd2 = 0x7fffffffd7c0; *pd2 = 0; *pd1 = 3; dAr[0] = 3

        /** Объясните результат выполнения операции вычитания двух указателей */
        pd1 = &dAr[0]; // pd1 = 0x7fffffffd7b0; *pd1 = 3
        pd2 = &dAr[1]; // pd2 = 0x7fffffffd7b8; *pd1 = 2
        int nNumber = pd2 - pd1; // 1

        /** 
         * Сравните указатели pd2 и pd1 и с помощью cout выведите результаты
         * сравнения.
         */
        bool ii = pd2 < pd1;
        cout << pd2 << ' ' << pd1 << ' ' << ii << endl; // ii = 0 --> pd2 > pd1
    }
/*
    /**
     * Задание 6. Явное преобразование указателя. 
     *
     * Иногда возникает необходимость одни и те же данные интерпретировать
     * по-разному, например, целое можно представить как совокупность четырех
     * байтов и работать с каждым байтом по отдельности. Для этого нужно иметь
     * возможность "указывать" как на целое, так и на байт. 
     * 
     * Следовательно, возникает необходимость явного преобразования указателя. 
     * 
     * Подсказка: для правильной интерпретации этого задания воспользуйтесь
     * возможностями отладчика представлять данные в интересующем Вас виде (в
     * данном случае - в шестнадцатеричном) - для этого можно использовать
     * команду print (p) с указанием шестнадцетиричного формата: `p/x`.
     */

    {
        unsigned int nObject = 0x55667788;
        unsigned int* pnObject = &nObject;
        unsigned char* pucObject;
        char cc;

        /**
         * Раскомментировав следующую строчку кода, обратите внимание на
         * сообщение компилятора - он не считает преобразование "легальным"
         * (безопасным)
         */
        // pucObject = static_cast<unsigned char*>(pnObject);

        // lab2.cpp:406:21: error: invalid ‘static_cast’ from type ‘unsigned int*’ to type ‘unsigned char*’

        /**
         * А такое преобразование - целиком на совести программиста. Его можно
         * применять, только четко представляя себе результат преобразования.
         */
        pucObject = reinterpret_cast<unsigned char*>(pnObject);

        /** Проследите за значениями переменной `cc`. Объясните результаты. */
        cc = pucObject[0]; // -120 <-- znachenie ukazatelia v tochke (bayte) (pucObject + 0) | *(pucObject + 0)
        cc = pucObject[1]; // 119
        cc = pucObject[2]; // 102
        cc = pucObject[3]; // 85

        // *побайтово sdvigaem ukazatel` na i

        /**
         * Выполните следующие строки, наблюдая за значениями следующих
         * выражений: `cc`, `p` и `*p`.
         *
         * Зафиксируйте и интерпретируйте результаты.
         */
        cc = *(pucObject++); // cc = -120.. 
        cc = (*pucObject)++; // cc = 119.. *pucObject = 120

        cc = ++*(pucObject); // cc = 121.. *pucObject = 121
        cc = *(++pucObject); // cc = 102.. *pucObject = 102
    }

    /**
     * Задание 7. Void-указатель. 
     */

    /**
     * Задание 7.1.
     * 
     * Выполняя задание, посмотрите - какие значения присваиваются
     * void-указателю.
     *
     * Обратите внимание: средствами отладчика вы не можете посмотреть
     * значения, на которые "указывает" void-указатель.
     */
    {
        void *pVoid;
        int nObject3 = 5;
        char cObject3 = 'A';
        int *pInt = &nObject3;  
        pVoid = &nObject3;
        pVoid = &cObject3;
        pVoid = pInt;

        /** 
         * Прежде, чем раскомментировать следующую строчку, вспомните: что
         * нужно сделать, чтобы выражение стало корректным?
         */
        pInt=static_cast<int *>(pVoid);

    }
    
    /**
     * Что нужно сделать для того, чтобы следующее закомментированное выражение
     * стало корректным?
     *
     * В закоментированной строке необходимо объявить void-указатель.
     */
    {
        const int n = 1;
        void const* pn = &n;
    }

    /**
     * Задание 7.2.
     *
     * При выполнении следующего фрагмента посмотрите, какие неприятности могут
     * Вас ожидать при явном приведении типа void-указателя, который в момент
     * времени (1) указывает на double, к типу указателя на int (2).
     */

    {
        double dObject3 = 33.33;
        void* pVoid = &dObject3;  //(1)

        int nTmp = *(static_cast<int*>(pVoid)); //(2) --> 1889785610
    }

    /**
     * Задание 8. Модификатор const. 
     */

    /**
     * Задание 8.1.
     *
     * В каждом из заданий объявите указатель требуемого вида. 
     *
     * Посредством каждого указателя попробуйте: 
     *
     * - получить значение по адресу;
     * - записать новое значение по адресу;
     * - модифицировать указатель.
     */

    /**
     * Задание 8.1.1. Указатель является константой. 
     */

    {
        int a8 = 8;
        int* const pa8 = &a8;

        // cout << (*pa8) << endl;
        // (*pa8)++;
        // pa8++; //error: increment of read-only variable ‘pa8’
    }
    
    /**
     * Задание 8.1.2. Указываемое значение является константой. 
     */

    {
        int a8 = 8;
        int const* pa8 = &a8;

        // cout << (*pa8) << endl;
        // (*pa8)++; //error: increment of read-only location ‘* pa8’
        // pa8++;
    }

    /**
     * Задание 8.1.3. И указатель, и указываемое значение являются константами. 
     */

    {
        int a8 = 8;
        int const * const pa8 = &a8;

        // cout << (*pa8) << endl;
        // (*pa8)++; //increment of read-only location ‘*(const int*)pa8’
        // pa8++; //increment of read-only variable ‘pa8’
    }

    /**
     * Задание 8.2. Указатель на переменную, объявленную с ключевым словом
     * const. 
     *
     * Объявите указатель и проинициализируйте его выражением - `&nN`.
     */

    {
        const int nN = 1;
        int const* pnN = &nN;
    }

    /**
     * Задание 9. Указатели на указатели.
     */

    {
        int n = 1;

        /** 
         * Объявите указатель pn и проинициализируйте его так, чтобы он
         * "указывал" на n. 
         */

        int* pn = &n;

        /** 
         * Объявите указатель ppn и проинициализируйте его так, чтобы он
         * "указывал" на pn. 
         */

        int** ppn = &pn;

        /** 
         * Объявите указатель pppn и проинициализируйте его так, чтобы он
         * "указывал" на ppn. 
         */

        int*** pppn = &ppn;

        /** 
         * С помощью указателей pn, ppn и pppn получите значение объекта n и
         * присвойте его m.
         */

        int m = (*pn);
        m = (**ppn);
        m = (***pppn);
    }
    return 0;
}
